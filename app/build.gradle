apply plugin: 'com.android.application'
apply plugin: 'realm-android'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"
    defaultConfig {
        applicationId "me.apexjcl.lynxenger"
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        def String = "String"
        def Long = "long"
        debug {
            buildConfigField String, "OBJECT_SERVER_IP", '"' + getIP() + ':"'
            buildConfigField String, "OBJECT_SERVER_PORT", "\"9080\""
            buildConfigField String, "OBJECT_SERVER_PROTOCOL", "\"http://\""
            buildConfigField Long, "SCHEMA_VERSION", "1"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "OBJECT_SERVER_IP", "\"apexjcl.me:\""
            buildConfigField "String", "OBJECT_SERVER_PORT", "\"9080\""
            buildConfigField String, "OBJECT_SERVER_PROTOCOL", "\"http://\""
            buildConfigField Long, "SCHEMA_VERSION", '1'
        }
    }
    realm {
        syncEnabled = true;
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'io.realm:android-adapters:2.0.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile "com.android.support:support-core-utils:25.3.1"
    testCompile 'junit:junit:4.12'
}


def getIP() {
    InetAddress result = null;
    Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
    while (interfaces.hasMoreElements()) {
        Enumeration<InetAddress> addresses = interfaces.nextElement().getInetAddresses();
        while (addresses.hasMoreElements()) {
            InetAddress address = addresses.nextElement();
            if (!address.isLoopbackAddress()) {
                if (address.isSiteLocalAddress()) {
                    return address.getHostAddress();
                } else if (result == null) {
                    result = address;
                }
            }
        }
    }
    return (result != null ? result : InetAddress.getLocalHost()).getHostAddress();
}